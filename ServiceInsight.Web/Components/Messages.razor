@using ServiceInsight.Web.Model
@using ServiceInsight.Web.Services
@using ServiceInsight.Web.Extensions


<div class="row">
  <div class="col-sm-8"><span class="@(searching ? "" : "d-none")">Searching @searchMessage</span></div>
  <div class="col-sm-4">
    <div class="input-group">
      <input type="text" class="form-control" placeholder="search..." @bind="SearchQuery"
             @oninput="@((e) => SearchQuery=(string)e.Value)"/>
      <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="Search"><i class="bi bi-search"></i></button>
      </div>
    </div>
  </div>
</div>
<div class="table-responsive @(searching ? "d-none" : "")" style="height: 50vh">
  <table class="table table-bordered table-striped table-hover table-sm">
    <thead>
      <tr>
        <th scope="col">Status</th>
        <th scope="col">ID</th>
        <th scope="col">Type</th>
        <th scope="col">Time Sent</th>
        <th scope="col">Delivery Time</th>
        <th scope="col">Procesing Time</th>
        <th scope="col">Critical Time</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var message in _messages)
      {
        <tr @onclick="() => MessageSelected(message)">
          <td title="@message.Status">
            @switch (message.Status)
            {
              case "successful":
                <i class="bi-check-circle-fill text-success"></i> 
                break;
              case "retriedSuccess":
                <i class="bi-check2-all text-success"></i> 
                break;
              case "retriedFailure":
                <i class="bi-exclamation-lg text-danger"></i><i class="bi-exclamation-lg text-danger"></i>
                break;
              case "failed":
                <i class="bi-x-circle-fill text-danger"></i> 
                break;
              case "archivedFailure":
                <i class="bi-archive text-muted"></i> 
                break;
                
              default:
                <span>@message.Status</span>
                break;
            }
          </td>
          <td>@message.MessageID</td>
          <td>@message.MessageType</td>
          <td>@message.TimeSent.ToOffset(userOffset).ToString("M/d/yyyy h:mm:ss tt")</td>
          <td>@message.DeliveryTime.Pretty()</td>
          <td>@message.ProcessingTime.Pretty()</td>
          <td>@message.CriticalTime.Pretty()</td>

        </tr>
      }
    </tbody>
  </table>
</div>

@code {

  private bool searching = false;
  private string searchMessage = "";
  private List<MessageInfo> _messages = new List<MessageInfo>();
  private TimeSpan userOffset;
  private string _currentEnvironment;
  private EndpointInfo _currentEndpoint;
  

  private string SearchQuery { get; set; }
  
  [Inject]
  private IServiceControlClientFactory _clientFactory { get; set; }
  
  [Inject]
  private IJSRuntime _js { get; set; }
  
  [Parameter]
  public EventCallback<MessageInfo> OnMessageSelected { get; set; }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      var timeDiff = await _js.InvokeAsync<int>("GetTimeZoneValue");
      userOffset = TimeSpan.FromMinutes(-timeDiff);
    }
  }
  private async Task Search()
  {
    if (!string.IsNullOrEmpty(SearchQuery))
    {
      searchMessage = $"messages with \"{SearchQuery}\"";
      await SearchMessages(_currentEnvironment, _currentEndpoint, SearchQuery);
      searchMessage = "";
    }
  }

  public async Task SearchMessages(string environment, EndpointInfo endpoint = null, string searchQuery = null)
  {
    searching = true;
    _currentEnvironment = environment;
    _currentEndpoint = endpoint;
    await MessageSelected(null);
    StateHasChanged();
    var clients = new List<IServiceControlClient> { _clientFactory.GetClient(environment) };

    var messageTasks = clients.Select(x => x.SearchMessages(keyword: searchQuery, endpoint: endpoint?.Name));

    _messages = (await Task.WhenAll(messageTasks)).SelectMany(x => x)
      .OrderByDescending(x => x.TimeSent)
      .ToList();
    searching = false;
    StateHasChanged();
  }
  
  private async Task MessageSelected(MessageInfo message)
  {
    await OnMessageSelected.InvokeAsync(message);
  }
}