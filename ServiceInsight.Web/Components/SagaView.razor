@using ServiceInsight.Web.Model
@using ServiceInsight.Web.Services
@using ServiceInsight.Web.Extensions
@using Newtonsoft.Json.Linq
@using Newtonsoft.Json
<h3><i class="bi-shuffle"></i> Saga</h3>
@if (SagaExists != null && !SagaExists.Value)
{
    <p>No saga available for selected message</p>
}
else
{
    <p>
        *NOTE* This is a work in progress and there is something fishy about some of the outgoing messages
        that display on the right side of the diagram.
    </p>
}
<div id="saga-graph">
</div>
@code {
    
    [Inject]
    private IServiceControlClientFactory _clientFactory { get; set; }
    
    [Inject]
    private IJSRuntime _js { get; set; }
    
    [Parameter]
    public MessageInfo Message { get; set; }
    
    [Parameter]
    public bool IsVisible { get; set; }
    private bool? SagaExists { get; set; }

    private string _currentMessageID;
    
    protected override async Task OnParametersSetAsync()
    {
         if (_currentMessageID != Message?.MessageID && IsVisible)
         {
             _currentMessageID = Message.MessageID;
             var client = _clientFactory.GetClient(Message.Environment);
             var sagaInfo = Message.OriginatesFromSaga ?? Message.InvokedSagas.FirstOrDefault();
             if (sagaInfo != null)
             {
                 SagaExists = true;
                 var excludedSagaPropertyKeys = new[] { "Id", "Originator", "OriginalMessageId", "$type" };
                 var gettingConversation = client.GetConversation(Message.ConversationID);
                 var gettingSaga = client.GetSaga(sagaInfo.SagaID);
                 var conversation = await gettingConversation;
                 var sagaDetail = await gettingSaga;
                 var diagram = "%%{init: { \"sequence\": { " +
                               "\"wrap\": false, " +
                               "\"messageAlign\": \"left\",  " +
                               "\"noteAlign\": \"left\",  " +
                               "\"rightAngles\": true, " +
                               "\"mirrorActors\": false } } }%%" +
                               "\nsequenceDiagram\n" +
                               "\tparticipant SAGA_INVOKED\n" +
                               "\tparticipant HANDLED\n";
                 JObject previousState = null;
                 foreach (var change in sagaDetail.Changes.OrderBy(x => x.StartTime))
                 {
                     diagram += $"\tNote left of SAGA_INVOKED: {change.InitiatingMessage.MessageType}\n";
                     diagram += $"\tSAGA_INVOKED->HANDLED: Saga {change.Status.FirstCharToUpper()}\n";
                     
                     
                     var newState = JsonConvert.DeserializeObject<JObject>(change.StateAfterChange);
                     var changedProperties = new List<string>();
                     foreach (var prop in newState)
                     {
                         if (previousState != null && prop.Value.ToString() != previousState[prop.Key].ToString())
                             changedProperties.Add($"{prop.Key}: {previousState[prop.Key] ?? "null"} -> {prop.Value}");
                         else if (previousState == null && !excludedSagaPropertyKeys.Contains(prop.Key))
                             changedProperties.Add($"{prop.Key}: {prop.Value}");
                     }
                     if (changedProperties.Any())
                     {
                         var note = string.Join("<br/>", changedProperties);
                         diagram += $"\tNote over SAGA_INVOKED,HANDLED: {note}\n";
                     }
                     previousState = newState;
                     if (change.OutgoingMessages.Any())
                     {
                         var changeMessage = conversation.FirstOrDefault(x => x.MessageID == change.InitiatingMessage.MessageID);
                         var outgoingMessages = conversation
                             .Where(x =>
                             {
                                 var relatedToMessageID = x.Headers.FirstOrDefault(h => h.Key == "NServiceBus.RelatedTo")?.Value;
                                 return !string.IsNullOrEmpty(relatedToMessageID) 
                                        && changeMessage?.MessageID == relatedToMessageID 
                                        && x.MessageID != changeMessage?.MessageID;
                             })
                             .Select(x => $"{x.Intent.FirstCharToUpper()} {x.MessageType}")
                             .Distinct().ToList();
                         if (outgoingMessages.Any())
                         {
                             var outgoing = string.Join("<br/>", outgoingMessages);
                             diagram += $"\tNote right of HANDLED: {outgoing}\n";
                         }
                     }
                 }
                 await _js.InvokeVoidAsync("ReRenderGraph", "saga-graph", diagram);
             }
         }
         else
             SagaExists = false;
    }
}