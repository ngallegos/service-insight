@using ServiceInsight.Web.Model
@using ServiceInsight.Web.Services
<h3><i class="bi-bezier2"></i> Sequence Diagram</h3>
<div id="sequence-graph">
</div>
@code {
    
    [Inject]
    private IServiceControlClientFactory _clientFactory { get; set; }
    
    [Inject]
    private IJSRuntime _js { get; set; }
    
    [Parameter]
    public MessageInfo Message { get; set; }
    
    [Parameter]
    public bool IsVisible { get; set; }
    
    
    private string _currentMessageID;
    
    protected override async Task OnParametersSetAsync()
    {
         if (_currentMessageID != Message?.MessageID && IsVisible)
         {
             _currentMessageID = Message.MessageID;
             var client = _clientFactory.GetClient(Message.Environment);
             var conversation = await client.GetConversation(Message.ConversationID);
             var diagram = "%%{init: { \"sequence\": { " +
                           "\"wrap\": false, " +
                           "\"messageAlign\": \"left\",  " +
                           "\"rightAngles\": true, " +
                           "\"mirrorActors\": false } } }%%" +
                           "\nsequenceDiagram\n";
             var activatedEndpoint = "";
             foreach (var msg in conversation)
             {
                 diagram += $"\t{msg.SendingEndpoint.Name}-->>{msg.ReceivingEndpoint.Name}: {msg.MessageType}\n";
                 if (msg.ReceivingEndpoint.Name != activatedEndpoint)
                 {
                     if (activatedEndpoint != string.Empty)
                         diagram += $"\tdeactivate {activatedEndpoint}\n";
                     activatedEndpoint = msg.ReceivingEndpoint.Name;
                     diagram += $"\tactivate {activatedEndpoint}\n";
                 }
             }
             if (activatedEndpoint != string.Empty)
                 diagram += $"\tdeactivate {activatedEndpoint}\n";
             await _js.InvokeVoidAsync("ReRenderGraph", "sequence-graph", diagram);
        }
    }
}