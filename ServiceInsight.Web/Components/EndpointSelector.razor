@using ServiceInsight.Web.Model
@using ServiceInsight.Web.Services
<nav id="sidebarMenu" class="@NavClasses bg-dark sidebar @NavMenuCssClass" style="height: 100vh;">
  <div class="position-sticky pt-3 sidebar-sticky">
      @foreach (var env in _endpoints
        .OrderBy(x => x.Key))
      {
        <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted text-uppercase">
          <span>@env.Key</span>
          <a href="#" @onclick:preventDefault @onclick="() => ToggleNavMenu(env.Key)">@env.Key</a>

        </h6>
        
        <ul class="nav flex-column @(_visibility[env.Key] ? "" : "d-none")">
          @foreach (var endpoint in env.Value)
          {
            <li class="nav-item">
              <a class="nav-link" aria-current="page" href="#" @onclick:preventDefault  @onclick="(args) => EndpointClicked(args, endpoint)">
                @endpoint.Name
              </a>
            </li>
          }
        </ul>
      }
  </div>
</nav>

@code {
  private bool collapseNavMenu = true;
  private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

  private Dictionary<string, List<EndpointInfo>> _endpoints = new();
  private Dictionary<string, bool> _visibility = new();
  
  [Parameter]
  public string NavClasses { get; set; }

  [Parameter]
  public EventCallback<EndpointInfo> EndpointSelected { get; set; }
  
  [Inject]
  private IServiceControlClientFactory _clientFactory { get; set; }
  
  protected override async Task OnInitializedAsync()
  {
    await RefreshEndpoints();
  }

  private async Task RefreshEndpoints(){
    var clients = _clientFactory.GetAllClients();
    var endpointTasks = clients.Select(e => e.GetMonitoredEndpoints());
    var allEndpoints = await Task.WhenAll(endpointTasks);

    _endpoints = allEndpoints.SelectMany(x => x)
      .GroupBy(x => x.Name)
      .ToDictionary(x => x.Key, x => x.ToList());
    
    
    _visibility = _endpoints.ToDictionary(x => x.Key, x => false);
    StateHasChanged();
  }

  
  
  private void ToggleNavMenu(string env)
  {
    _visibility[env] = !_visibility[env];
    StateHasChanged();
  }

  private async Task EndpointClicked(MouseEventArgs args, EndpointInfo endpoint)
  {
    await EndpointSelected.InvokeAsync(endpoint);
  }
}